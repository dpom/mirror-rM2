#+TITLE: SoftwareSpec
#+DESCRIPTION: specificatiile software
#+AUTHOR: Dan Pomohaci
#+EMAIL: dan.pomohaci@gmail.com
#+STARTUP: overview indent align inlineimages

* Purpose

- this app should mirror remarkable on your laptop
- everything I write or draw on remarkable should appear in real time in the app on my laptop including erasures

* Implementation

- clojure application using integrant
- components:
  - tracer :: tracks moves made on remarkable
  - render :: render the moves
  - logger :: logging - use =duct.logger=
- for communication between the 2 main components I used manifold stream
- so far I have only one function in boundary : get-stream
- in fact I don't need a function because all the main components use the same key =:stream= for stream
- the main program just needs to connect the stream from the rederer to the tracer stream

** mirror.tracer.event

- is the component that tracks stylus movements on remarkable
- connects via ssh to remarkable and reads all messages from =/dev/input/event1=
- input parameter:
  - server :: remarkable address
- user and password should also be input parameters but they are not because I created a gpg key specifically for remarkable and configured ~known_hosts~ (remakable) and ssh config (host) to use it for authentication
    
** mirror.tracer.file

- to not use remarkable every time I implemented a component that reads stylus events from a file
- module implements the function:
  - trace! [filename] :: send to stream all events stored in the filename file

** mirror.renderer.file

- renderer that saves Events to a file
- input parameter:
  - filename :: filename of the file to save events to

** mirror.renderer.screen
